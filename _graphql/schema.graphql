type Game {
	GameId: ID!
	HostId: String!
	StatusDate: String!
	OpponentId: String!
	OPlayer: String!
	Turn: String!
	Game: [String]
	StartDate: String!
	UpdateDate: String
}

type PlayerGames {
	Invited: [Game]
	Active: [Game]
	Finished: [Game]
}

type Player {
	Id: ID!
	Username: String!
}

type PlayerConnection {
	players: [Player]
	nextToken: String
}

type Mutation {
	# create a new game by inviting an opponent
	createGame(OpponentId: String!): Game
	# start a new game by accepting an invitation
	startGame(GameId: ID!): Game
	# player takes turn, marking space with 'X' or 'O', updating game board
	playGame(GameId: ID!, Turn: String!, Game: [String]!): Game
	# finish a game when one player wins or reach a draw
	finishGame(GameId: ID!): Game
	# decline an invited game
	declineGame(GameId: ID!): Game
}

type Query {
	# listing of all players available in the game
	allPlayers(nextToken: String): PlayerConnection
	# listing of all games associated with the given player
	playerGames(PlayerId: String!): PlayerGames
	# Get a single value of type 'Game' by primary key.
	getGame(GameId: ID!): Game
}

type Subscription {
	# when a player is invited to play a game
	onGameInvite(OpponentId: String!): Game
		@aws_subscribe(mutations: ["createGame"])
	# when the status of a game or the player turn updates
	onGameUpdate(GameId: ID!): Game
		@aws_subscribe(mutations: ["startGame","playGame","finishGame"])
	# when a player takes his turn
	onGamePlay(GameId: ID!): Game
		@aws_subscribe(mutations: ["playGame"])
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
