type Game {
	GameId: ID!
	HostId: String!
	StatusDate: String!
	OpponentId: String!
	OPlayer: String!
	Turn: String!
	Game: [String]
	StartDate: String!
	UpdateDate: String
}

type GameConnection {
	games: [Game]
	nextToken: String
}

type Mutation {
	# Create a new game
	createGame(HostId: String!, OpponentId: String!): Game
	# Update the state of game play
	updateGame(GameId: ID!, Game: [String]!, Turn: String!): Game
	# Delete a single value of type 'Game' by a primary key.
	deleteGame(GameId: ID!): Game
}

type Player {
	Id: ID!
	Username: String!
}

type PlayerConnection {
	players: [Player]
	nextToken: String
}

type Query {
	allPlayers(nextToken: String): PlayerConnection
	invites(username: String!, count: Int, nextToken: String): GameConnection
	inProgress(username: String!, count: Int, nextToken: String): GameConnection
	finished(username: String!, count: Int, nextToken: String): GameConnection
	# Get a single value of type 'Game' by primary key.
	getGame(GameId: ID!): Game
}

type Subscription {
	onInvited(OpponentId: String!): Game
		@aws_subscribe(mutations: ["createGame"])
	onGameUpdated(GameId: ID!): Game
		@aws_subscribe(mutations: ["updateGame"])
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}